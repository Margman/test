print("test")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Camera = game:GetService("Workspace").CurrentCamera
local UserInputService = game:GetService("UserInputService")
local TestService = game:GetService("TestService")
local Typing = false

_G.SendNotifications = false   -- If set to true then the script would notify you frequently on any changes applied and when loaded / errored. (If a game can detect this, it is recommended to set it to false)
_G.DefaultSettings = false   -- If set to true then the tracer script would run with default settings regardless of any changes you made.

_G.TeamCheck = false   -- If set to true then the script would create tracers only for the enemy team members.

--[!]-- ONLY ONE OF THESE VALUES SHOULD BE SET TO TRUE TO NOT ERROR THE SCRIPT --[!]--

_G.FromMouse = false   -- If set to true, the tracers will come from the position of your mouse curson on your screen.
_G.FromCenter = false   -- If set to true, the tracers will come from the center of your screen.
_G.FromBottom = true   -- If set to true, the tracers will come from the bottom of your screen.

_G.TracersVisible = false   -- If set to true then the tracers will be visible and vice versa.
_G.TracerColor = Color3.fromRGB(255, 80, 10)   -- The color that the tracers would appear as.
_G.TracerThickness = 1   -- The thickness of the tracers.
_G.TracerTransparency = 0.7   -- The transparency of the tracers.

_G.ModeSkipKey = nil   -- The key that changes between modes that indicate where will the tracers come from.
_G.DisableKey = nil   -- The key that disables / enables the tracers.

local function CreateTracers()
    for _, v in next, Players:GetPlayers() do
        if v.Name ~= game.Players.LocalPlayer.Name then
            local TracerLine = Drawing.new("Line")
    
            RunService.RenderStepped:Connect(function()
                if workspace:FindFirstChild(v.Name) ~= nil and workspace[v.Name]:FindFirstChild("HumanoidRootPart") ~= nil then
                    local HumanoidRootPart_Position, HumanoidRootPart_Size = workspace[v.Name].HumanoidRootPart.CFrame, workspace[v.Name].HumanoidRootPart.Size * 1
                    local Vector, OnScreen = Camera:WorldToViewportPoint(HumanoidRootPart_Position * CFrame.new(0, -HumanoidRootPart_Size.Y, 0).p)
                    
                    TracerLine.Thickness = _G.TracerThickness
                    TracerLine.Transparency = _G.TracerTransparency
                    TracerLine.Color = _G.TracerColor

                    if _G.FromMouse == true and _G.FromCenter == false and _G.FromBottom == false then
                        TracerLine.From = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
                    elseif _G.FromMouse == false and _G.FromCenter == true and _G.FromBottom == false then
                        TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                    elseif _G.FromMouse == false and _G.FromCenter == false and _G.FromBottom == true then
                        TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                    end

                    if OnScreen == true  then
                        TracerLine.To = Vector2.new(Vector.X, Vector.Y)
                        if _G.TeamCheck == true then 
                            if Players.LocalPlayer.Team ~= v.Team then
                                TracerLine.Visible = _G.TracersVisible
                            else
                                TracerLine.Visible = false
                            end
                        else
                            TracerLine.Visible = _G.TracersVisible
                        end
                    else
                        TracerLine.Visible = false
                    end
                else
                    TracerLine.Visible = false
                end
            end)

            Players.PlayerRemoving:Connect(function()
                TracerLine.Visible = false
            end)
        end
    end

    Players.PlayerAdded:Connect(function(Player)
        Player.CharacterAdded:Connect(function(v)
            if v.Name ~= game.Players.LocalPlayer.Name then
                local TracerLine = Drawing.new("Line")
        
                RunService.RenderStepped:Connect(function()
                    if workspace:FindFirstChild(v.Name) ~= nil and workspace[v.Name]:FindFirstChild("HumanoidRootPart") ~= nil then
                        local HumanoidRootPart_Position, HumanoidRootPart_Size = workspace[v.Name].HumanoidRootPart.CFrame, workspace[v.Name].HumanoidRootPart.Size * 1
                    	local Vector, OnScreen = Camera:WorldToViewportPoint(HumanoidRootPart_Position * CFrame.new(0, -HumanoidRootPart_Size.Y, 0).p)
                        
                        TracerLine.Thickness = _G.TracerThickness
                        TracerLine.Transparency = _G.TracerTransparency
                        TracerLine.Color = _G.TracerColor

                        if _G.FromMouse == true and _G.FromCenter == false and _G.FromBottom == false then
                            TracerLine.From = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
                        elseif _G.FromMouse == false and _G.FromCenter == true and _G.FromBottom == false then
                            TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                        elseif _G.FromMouse == false and _G.FromCenter == false and _G.FromBottom == true then
                            TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                        end

                        if OnScreen == true  then
                            TracerLine.To = Vector2.new(Vector.X, Vector.Y)
                            if _G.TeamCheck == true then 
                                if Players.LocalPlayer.Team ~= Player.Team then
                                    TracerLine.Visible = _G.TracersVisible
                                else
                                    TracerLine.Visible = false
                                end
                            else
                                TracerLine.Visible = _G.TracersVisible
                            end
                        else
                            TracerLine.Visible = false
                        end
                    else
                        TracerLine.Visible = false
                    end
                end)

                Players.PlayerRemoving:Connect(function()
                    TracerLine.Visible = false
                end)
            end
        end)
    end)
end

UserInputService.TextBoxFocused:Connect(function()
    Typing = true
end)

UserInputService.TextBoxFocusReleased:Connect(function()
    Typing = false
end)

UserInputService.InputBegan:Connect(function(Input)
    if Input.KeyCode == _G.ModeSkipKey and Typing == false then
        if _G.FromMouse == true and _G.FromCenter == false and _G.FromBottom == false and _G.TracersVisible == true then
            _G.FromCenter = false
            _G.FromBottom = true
            _G.FromMouse = false

            if _G.SendNotifications == true then
                game:GetService("StarterGui"):SetCore("SendNotification",{
                    Title = "Exunys Developer";
                    Text = "Tracers will be now coming from the bottom of your screen (Mode 1)";
                    Duration = 5;
                })
            end
        elseif _G.FromMouse == false and _G.FromCenter == false and _G.FromBottom == true and _G.TracersVisible == true then
            _G.FromCenter = true
            _G.FromBottom = false
            _G.FromMouse = false

            if _G.SendNotifications == true then
                game:GetService("StarterGui"):SetCore("SendNotification",{
                    Title = "Exunys Developer";
                    Text = "Tracers will be now coming from the center of your screen (Mode 2)";
                    Duration = 5;
                })
            end
        elseif _G.FromMouse == false and _G.FromCenter == true and _G.FromBottom == false and _G.TracersVisible == true then
            _G.FromCenter = false
            _G.FromBottom = false
            _G.FromMouse = true

            if _G.SendNotifications == true then
                game:GetService("StarterGui"):SetCore("SendNotification",{
                    Title = "Exunys Developer";
                    Text = "Tracers will be now coming from the position of your mouse cursor on your screen (Mode 3)";
                    Duration = 5;
                })
            end
        end
    elseif Input.KeyCode == _G.DisableKey and Typing == false then
        _G.TracersVisible = not _G.TracersVisible
        
        if _G.SendNotifications == true then
            game:GetService("StarterGui"):SetCore("SendNotification",{
                Title = "Exunys Developer";
                Text = "The tracers' visibility is now set to "..tostring(_G.TracersVisible)..".";
                Duration = 5;
            })
        end
    end
end)
pcall(function()
    CreateTracers()
end)

local tablefind = table.find
local SpoofTable = {
    WalkSpeed = 16,
    JumpPower = 50
}

local __index
__index = hookmetamethod(game, "__index", function(t, k)
    if (not checkcaller() and t:IsA("Humanoid") and (k == "WalkSpeed" or k == "JumpPower")) then
        return SpoofTable[k]
    end
    return __index(t, k)
end)

local __newindex
__newindex = hookmetamethod(game, "__newindex", function(t, k, v)
    if (not checkcaller() and t:IsA("Humanoid") and (k == "WalkSpeed" or k == "JumpPower")) then
        SpoofTable[k] = v
        return
    end
    return __newindex(t, k, v)
end)

local LP = game.Players.LocalPlayer
local Mouse = LP:GetMouse()
getgenv().toggler = false
local SPEED = 0
FLYING = false
getgenv().iyflyspeed = 0

function sFLY() 
    repeat wait() until LP and LP.Character and LP.Character:FindFirstChild('HumanoidRootPart') and LP.Character:FindFirstChild('Humanoid')
        game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").Anchored = true
    repeat wait() until Mouse
        local T = game.Players.LocalPlayer.Character.HumanoidRootPart
        local CONTROL = {F = 0, B = 0, L = 0, R = 0}
        local lCONTROL = {F = 0, B = 0, L = 0, R = 0}
        
        local function FLY()
            FLYING = true
            local BG = Instance.new('BodyGyro', T)
            local BV = Instance.new('BodyVelocity', T)
        	BG.P = 9e4
            BG.maxTorque = Vector3.new(9e9, 9e9, 9e9)
            BG.cframe = T.CFrame
            BV.velocity = Vector3.new(0, 0.1, 0)
            BV.maxForce = Vector3.new(9e9, 9e9, 9e9)
            spawn(function()
            repeat wait()
            
            if CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 then
            SPEED = 50
            elseif not (CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0) and SPEED ~= 0 then
            SPEED = 0
            end
    if (CONTROL.L + CONTROL.R) ~= 0 or (CONTROL.F + CONTROL.B) ~= 0 then
    BV.velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (CONTROL.F + CONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(CONTROL.L + CONTROL.R, (CONTROL.F + CONTROL.B) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
    lCONTROL = {F = CONTROL.F, B = CONTROL.B, L = CONTROL.L, R = CONTROL.R}
    elseif (CONTROL.L + CONTROL.R) == 0 and (CONTROL.F + CONTROL.B) == 0 and SPEED ~= 0 then
    BV.velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (lCONTROL.F + lCONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(lCONTROL.L + lCONTROL.R, (lCONTROL.F + lCONTROL.B) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
    else
    BV.velocity = Vector3.new(0, 0.1, 0)
    end
    BG.cframe = workspace.CurrentCamera.CoordinateFrame
        until not FLYING
            CONTROL = {F = 0, B = 0, L = 0, R = 0}
            lCONTROL = {F = 0, B = 0, L = 0, R = 0}
            SPEED = 0
            BG:destroy()
            BV:destroy()
        end)
    end

    Mouse.KeyDown:Connect(function(KEY)
        if KEY:lower() == 'w' then
            CONTROL.F = iyflyspeed
        elseif KEY:lower() == 's' then
            CONTROL.B = -iyflyspeed
        elseif KEY:lower() == 'a' then
            CONTROL.L = -iyflyspeed 
        elseif KEY:lower() == 'd' then 
            CONTROL.R = iyflyspeed
    	end
    end)

    Mouse.KeyUp:Connect(function(KEY)
        if KEY:lower() == 'w' then
            CONTROL.F = 0
        elseif KEY:lower() == 's' then
            CONTROL.B = 0
        elseif KEY:lower() == 'a' then
            CONTROL.L = 0
        elseif KEY:lower() == 'd' then
            CONTROL.R = 0
        end
    end)
    FLY()
    game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = false
end
    
    
function NOFLY()
    FLYING = false
end
    
function startflying()
    wait()
    sFLY()
    wait(0.1)
    local Float = Instance.new('Part', game.Players.LocalPlayer.Character)
    Float.Name = 'Float'
    Float.Transparency = 1
    Float.Size = Vector3.new(6,1,6)
    Float.Anchored = true
end

function notify(text,dur)
	game.StarterGui:SetCore("SendNotification", {
		Title = "DG Community"; 
		Text = text; 
		Duration = dur; 
	})
end

local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/vozoid/ui-libraries/main/drawing/void/source.lua"))()
local main = library:Load{
    Name = "DG Community",
    SizeX = 500,
    SizeY = 350,
    Theme = "Midnight",
    Extension = "json", -- config file extension
    Folder = "configname dg" -- config folder name
}
local tab = main:Tab("LocalThings")
local LocalThings = tab:Section{
    Name = "LocalThings",
    Side = "Left"
}

local WalkSpeed = LocalThings:Toggle{
    Name = "WalkSpeed",
    Flag = "WalkSpeed",
    Callback = function(bool)
        while bool do wait()
		game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid").WalkSpeed = ws 
		end 
    end
}

WalkSpeed:Slider{
    Text = "[value]/500",
    Min = 0,
    Max = 500,
    Float = 16,
    Flag = "WalkSpeedSlider",
    Callback = function(value)
        getgenv().ws = value 
    end
}
local JumpPower = LocalThings:Toggle{
    Name = "JumpPower",
    Flag = "JumpPower",
    Callback  = function(bool)
        while bool do wait()
		game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid").JumpPower = js 
		end 
    end
}

JumpPower:Slider{
    Text = "[value]/500",
    Min = 0,
    Max = 500,
    Float = 50,
    Flag = "JumpPowerSlider",
    Callback = function(value)
        getgenv().js = value 
    end
}

local HipHeight = LocalThings:Toggle{
    Name = "HipHeight",
    Flag = "HipHeight",
    Callback  = function(bool)
        while bool do wait()
		game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid").HipHeight = hh 
		end 
    end
}

local Fly = LocalThings:Toggle{
    Name = "Fly",
    Flag = "Fly",
    --Default = true,
    Callback  = function(bool)
    getgenv().toggler = bool

	if bool then
		notify("Fly Enabled",3)
	else
		notify("Fly Disabled",3)
	end

	if toggler == true then 
      startflying() 
	  elseif toggler == false then 
	  NOFLY()
	  if game.Players.LocalPlayer.Character then
            if game.Players.LocalPlayer.Character:FindFirstChild("Float") then
                game.Players.LocalPlayer.Character:FindFirstChild("Float"):Destroy()
            end
        end
	end 
end
}


Fly:Slider{
    Text = "[value]/300",
    Min = 0,
    Max = 300,
    Float = 30,
    Flag = "FlySpeedSlider",
    Callback = function(value)
	while toggler do wait()
        getgenv().iyflyspeed = value/10 
		end 
    end
}

local InfinityJump = LocalThings:Toggle{
    Name = "InfinityJump",
    Flag = "InfinityJump",
    Callback  = function(bool)
	getgenv().infjump = bool 
	if infjump then 
	notify("Infinity Jump Enabled",3)
	else
	notify("Infinity Jump Disabled",3)
	end
        game:GetService("UserInputService").JumpRequest:Connect(function()
		if infjump == true then
        	game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")       
		end
	end)
    end
}

HipHeight:Slider{
    Text = "[value]/20",
    Min = 0,
    Max = 20,
    Float = 2,
    Flag = "HipHeightSlider",
    Callback = function(value)
        getgenv().hh = value 
    end
}

local ESPa = tab:Section{
    Name = "ESP",
    Side = "Right"
}

local ESP = ESPa:Toggle{
    Name = "ESP",
    Flag = "ESP",
    Callback = function(bool)
      if bool then 
	  notify("ESP enabled!",3)
	  else
	  notify("ESP disabled!",3)
	  end 
	  getgenv().PlayerESPing = bool 
    end
}

local Tracers = tab:Section{
    Name = "Tracers",
    Side = "Right"
}

local PlayerTracers = Tracers:Toggle{
    Name = "Tracers",
    Flag = "Tracers",
    Callback = function(bool)
      if bool then 
	  notify("Tracers enabled!",3)
	  else
	  notify("Tracers disabled!",3)
	  end 
	  _G.TracersVisible = bool 
    end
}

local TracersTeamCheck = Tracers:Toggle{
    Name = "TracersTeamCheck",
    Flag = "TracersTeamCheck",
    Callback = function(bool)
      if bool then 
	  notify("TracersTeamCheck enabled!",3)
	  else
	  notify("TracersTeamCheck disabled!",3)
	  end 
	  _G.TeamCheck = bool 
    end
}

local TracersFromMouse = Tracers:Toggle{
    Name = "TracersFromMouse",
    Flag = "TracersFromMouse",
    Callback = function(bool)
      if bool then 
	  notify("TracersFromMouse enabled!",3)
	  else
	  notify("TracersFromMouse disabled!",3)
	  end 
	  _G.FromMouse = bool 
    end
}

local TracersFromCenter = Tracers:Toggle{
    Name = "TracersFromCenter",
    Flag = "TracersFromCenter ",
    Callback = function(bool)
      if bool then 
	  notify("TracersFromCenter enabled!",3)
	  else
	  notify("TracersFromCenter disabled!",3)
	  end 
	  _G.FromCenter = bool 
    end
}

local TracersFromBottom = Tracers:Toggle{
    Name = "TracersFromBottom",
    Flag = "TracersFromBottom ",
    Callback = function(bool)
      if bool then 
	  notify("TracersFromBottom enabled!",3)
	  else
	  notify("TracersFromBottom disabled!",3)
	  end 
	  _G.FromBottom = bool 
    end
}

local ExtraTab = main:Tab("Extras")
local Extras = ExtraTab:Section{
    Name = "Extras",
    Side = "Left"
}

Extras:Button{
    Name = "Disable Lasers",
    Callback = function()
    for e, q in pairs(game:GetService("Workspace"):GetDescendants()) do
    if q.Name == 'laser' or q.Name ==  'NightLaser' or q.Name == 'Laser' or q.Name == 'TopLasers' or q.Name == 'Spotlight'  or q.Name == "MovingLasers" or q.Name == "Lasers" then 
    q:Destroy()
    end
    end 
end
}

Extras:Button{
Name = "Disable Lasers[2]",
Callback = function()
for e,q in pairs(game:GetService("Workspace").Heists.Casino.Stealthy.Items.Detectors:GetChildren()) do 
    if  q.Name == "20" or q.Name == "Part" then 
        q:Destroy()
        end 
end 
game:GetService("Workspace").Heists.Club.Level3.Items.RotatingPlatform.Rotate:Destroy()
	  notify("Lasers disabled!",3)
	  end 
}
Extras:Button{
    Name = "Disable Troops",
    Callback = function()
	for e,q in pairs(game:GetService("Workspace").Heists.Pyramid.Level2:GetChildren()) do 
    if q.Name == "Lava" or q.Name == "RockWall" or q.Name == "RoofTrap" or q.Name == "Flamethrowers" or q.Name == "PressurePlates" then 
        q:Destroy()
	    notify("Troops disabled!",3)
        end 
end 
end 
}

Extras:Button{
    Name = "Disable Troops[2]",
    Callback = function()
	for e,q in pairs(game:GetService("Workspace").Heists.Pyramid.Level1:GetChildren()) do 
    if q.Name == "Lava" or q.Name == "Balls" or q.Name == "Saws" or q.Name == "Flamethrowers" or q.Name == "SpikeTraps" then 
        q:Destroy()
	    notify("Troops disabled!",3)
        end 
end 
end 
}

local CreditsTab = main:Tab("Credits")
local Credits = CreditsTab:Section{
    Name = "Credits",
    Side = "Left"
}
local CreditsLabel = Credits:Label("Developer Margman9is9nothing")
local CreditsLabel1 = Credits:Label("Beta-Tester STALKER3406")
local CreditsLabel1 = Credits:Label("Beta-Tester Flwness")

Credits:Button{
    Name = "DG community discord server",
    Callback  = function()
    local req = request 
	local synreq = syn
		if req ~= nil then
		request({
			Url = "http://127.0.0.1:6463/rpc?v=1",
			Method = "POST",
			Headers = {
				["Content-Type"] = "application/json",
				["Origin"] = "https://discord.com"
			},
			Body = game:GetService("HttpService"):JSONEncode({
				cmd = "INVITE_BROWSER",
				args = {
					code = "F38s7385Tb"
				},
				nonce = game:GetService("HttpService"):GenerateGUID(false)
			}),
		})
	end
	if synreq ~= nil then
		syn.request({
			Url = "http://127.0.0.1:6463/rpc?v=1",
			Method = "POST",
			Headers = {
				["Content-Type"] = "application/json",
				["Origin"] = "https://discord.com"
			},
			Body = game:GetService("HttpService"):JSONEncode({
				cmd = "INVITE_BROWSER",
				args = {
					code = "F38s7385Tb"
				},
				nonce = game:GetService("HttpService"):GenerateGUID(false)
			}),
		})
	end
    end
}

function round(num, numDecimalPlaces)
	local mult = 10^(numDecimalPlaces or 0)
	return math.floor(num * mult + 0.5) / mult
end

function addesp(espparent, color)
	local BillboardGui = Instance.new("BillboardGui")
	local TextLabel = Instance.new("TextLabel")
	BillboardGui.Adornee = espparent
	BillboardGui.Name = "PlayerESP"
	BillboardGui.Parent = espparent
	BillboardGui.Size = UDim2.new(0, 100, 0, 150)
	BillboardGui.StudsOffset = Vector3.new(0, 1, 0)
	BillboardGui.AlwaysOnTop = true
	TextLabel.Parent = BillboardGui
	TextLabel.BackgroundTransparency = 1
	TextLabel.Position = UDim2.new(0, 0, 0, -50)
	TextLabel.Size = UDim2.new(0, 100, 0, 100)
	TextLabel.Font = Enum.Font.SourceSansSemibold
	TextLabel.TextSize = 20
	TextLabel.TextColor3 = color
	TextLabel.TextStrokeTransparency = 0
	TextLabel.TextYAlignment = Enum.TextYAlignment.Bottom
    local pos = math.floor((game:GetService("Players").LocalPlayer.Character:WaitForChild("HumanoidRootPart").Position - espparent.Parent:WaitForChild("HumanoidRootPart").Position).magnitude)
    TextLabel.Text = 'Name: '..espparent.Parent.Name..' | Health: '..round(espparent.Parent:FindFirstChildOfClass('Humanoid').Health, 1)..' | Studs: '..pos
	TextLabel.ZIndex = 10
end

game:GetService("RunService").RenderStepped:connect(function()
if PlayerESPing == true then 
for i,v in pairs(game:GetService("Players"):GetPlayers()) do 
if v ~= game:GetService("Players").LocalPlayer and v.Character then 
if v.Character:FindFirstChild("Head") ~= nil then 
if v.Character.Head:FindFirstChild("PlayerESP") == nil then 
addesp(v.Character.Head, v.TeamColor.Color)
end 
end 
end 
end 
elseif PlayerESP == nil then 
for i,v in pairs(game:GetService("Players"):GetPlayers()) do 
if v ~= game:GetService("Players").LocalPlayer and v.Character then 
if v.Character:FindFirstChild("Head") ~= nil then 
if v.Character.Head:FindFirstChild("PlayerESP") ~= nil then 
v.Character.Head:FindFirstChild("PlayerESP"):Destroy()
end 
end 
end 
end 
end 
end)
